#include "mbed.h"
#include "BME280.h"
#include <arm_acle.h>
#include <cstring>
#include <string>
#include <iostream>
#include <cstdlib>
#include <charconv>
#include <BufferedSerial.h>


#define MAX_DIGITS 10

Thread thread1;
char buffer [10] = {};
static BufferedSerial pc(USBTX, USBRX);
static BufferedSerial dev(D8, D2);
BME280 sensor(I2C_SDA, I2C_SCL);

void dev_recv()
{
    while(dev.readable()) {
        pc.putc(dev.getc());
    }
}

void pc_recv()
{
    while(pc.readable()) {
        dev.putc(pc.getc());
    }
}

void print_f(const char*temperature, const char*pressure, const char*humidity)
{
    printf("%i\n", sensor.getTemperature());
    printf("--------------\n");
    printf("%s\n", temperature);
    printf("--------------\n");
    printf("--------------\n");
    printf("%i\n", sensor.getPressure());
    printf("--------------\n");
    printf("%s\n", pressure);
    printf("--------------\n");
    printf("--------------\n");
    printf("%i\n", sensor.getHumidity());
    printf("--------------\n");
    printf("%s\n", humidity);
    printf("--------------\n");
    printf("--------------\n");
    ThisThread::sleep_for(5s);
}

int main()
{
    int baudrate = 115200;  
    int q = 0;
    while(1) 
    {        
        char command_WAKE_UP[2] = {'a', 't'};
        for(int i = 0; i < strlen(command_WAKE_UP); i++)
        {
            putc(command_WAKE_UP[i]);
            printf("%c", command_WAKE_UP[i]);
        }
        dev.putc('\n');
        dev.putc('\r');
        ThisThread::sleep_for(3ms);
        //pc.baud(115200);
        pc.set_baud(baudrate);
        dev.set_baud(baudrate);
        char command_JOIN[9] = {'a', 't', '+', 'j', 'o', 'i', 'n', '\n', '\r'};
        if(q == 3) //10
        {
            for(int i = 0; i < sizeof(command_JOIN); i++)
            {
                 dev.putc(command_JOIN[i]);
                 printf("%c", command_JOIN[i]);
            }
            q = 0;
            ThisThread::sleep_for(10ms);    
        }
        q++;

        char command_SEND[23] = {'a', 't', '+', 's', 'e', 'n', 'd', '=', 'l', 'o', 'r', 'a', ':', '1', ':'};
        //типа метод по преобразованию инта температуры в символы
        char temp[MAX_DIGITS];
        int k = sensor.getTemperature();
        printf("\n%d\n", sensor.getTemperature());
        int v = 0; //количество цифр в числе n
        //разбиваем на отдельные символы число n
        while (k > 9)
        {
            temp[v] = (k % 10) + '0';
            k = k / 10;
            v++;
        }
        temp[v] = k + '0';
        temp[v] = '\0';
        char t;

        //инвертируем массив символов
        for (int i = 0; i < v / 2; i++)
        {
            t = temp[i];
            temp[i] = temp[v - 1 - i];
            temp[v - 1 - i] = t;
        }
        v = 0;
        for(int i = 0; i < strlen(temp); i++)
        {
            command_SEND[i+15] += temp[i];
        }
        free (temp);
        pc.set_baud(baudrate);
        for(int i = 0; i < sizeof(command_SEND); i++)
        {
            dev.putc(command_SEND[i]);
            printf("%c", command_SEND[i]);
        }
        dev.putc('\n');
        dev.putc('\r');
        ThisThread::sleep_for(7ms);
        pc.attach(&pc_recv, BufferedSerial::RxIrq);

        ThisThread::sleep_for(5s);

        thread1.start(print_f());
    }
}